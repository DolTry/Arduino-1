#include <AES.h>
#include <GCM.h>

struct ADADTest
{
  const char *name;
  byte key[16];
  byte iv[16];
  byte ciphertext[96];
  byte data[16];
  byte tag[16];
};

static ADADTest const AES128GCMTest = {
  "AES-128-GCM-verify-decrypt",
  {0x37, 0x4C, 0x33, 0x53, 0x77, 0x53, 0x71, 0x61,
  0x34, 0x4D, 0x6E, 0x4D, 0x69, 0x50, 0x5A, 0x44},
  {0x50, 0x55, 0x71, 0x78, 0x33, 0x31, 0x7A, 0x36,
  0x74, 0x6B, 0x41, 0x63, 0x53, 0x47, 0x75, 0x4E},
  {0x8C, 0xE9, 0x46, 0x4F, 0x7A, 0x94, 0x55, 0x2C, 
  0x35, 0x20, 0x91, 0x78, 0x05, 0xB8, 0x69, 0xD1, 
  0x39, 0x02, 0x0A, 0xAF, 0xBD, 0xCE, 0x73, 0x1B, 
  0xEA, 0x5B, 0xC5, 0x27, 0xE4, 0xA5, 0x19, 0xEC, 
  0x5D, 0xC7, 0x81, 0x0C, 0xA4, 0xC5, 0x5D, 0x10, 
  0x65, 0xA8, 0xED, 0x93, 0xB6, 0x7A, 0x04, 0xF1, 
  0x13, 0x51, 0x1E, 0x73, 0xD1, 0x56, 0xA7, 0x7A, 
  0x9F, 0x76, 0x76, 0xA8, 0x04, 0x45, 0xBB, 0x72, 
  0x93, 0x82, 0x76, 0xCE, 0xBF, 0xC4, 0x44, 0x66, 
  0x18, 0xF2, 0x02, 0x59, 0xA0, 0x50, 0xE1, 0x84, 
  0xDB, 0xD0, 0x38, 0xC7, 0x79, 0xD5, 0xFB, 0xE2, 
  0xB4, 0x14, 0x24, 0x18, 0x38, 0x8C, 0x78, 0xAD},
  {0x41, 0x73, 0x73, 0x6F, 0x63, 0x69, 0x61, 0x74,
  0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2E},
  {0x94, 0x18, 0x38, 0xCA, 0x34, 0x29, 0x2D, 0xB6, 
  0x3D, 0x66, 0x8C, 0x6C, 0x9A, 0x33, 0xE9, 0xC0}
};

GCM<AES128> ADAD;

void performVerificationAndDecryption(const struct ADADTest *test, GCM<AES128> *cipher) {
  unsigned long start, elapsed;
  byte output[96] = {0};

  printHex(test->ciphertext, 96);
  Serial.println();
  start = millis();
  cipher->setKey(test->key, cipher->keySize());
  cipher->setIV(test->iv, cipher->ivSize());
  cipher->addAuthData(test->data, 16);
  cipher->decrypt((uint8_t*) output, (uint8_t*)test->ciphertext, sizeof(test->ciphertext));
  if (cipher->checkTag(test->tag, 16)) {
    Serial.print("Valid tag\n");
  } else {
    Serial.print("Invalid tag\n");
    return;
  }
  elapsed = millis() - start;
  for (short i=0; i < 96; i++) {
    Serial.print((char)output[i]);
  }
  Serial.println(); Serial.print(elapsed); Serial.print(" milliseconds \n");
}

void printHex(const uint8_t *input, size_t len) {
  for (short i=0; i < len; i++) {
    if (i % 8 == 0) {
      Serial.println();
    }
    Serial.print("0x");
    if (input[i] < 16) {
      Serial.print('0'); 
    }
    Serial.print(input[i], HEX);
    if (i+1 != len) {
      Serial.print(", ");
    }
 }
}

void setup() {
  Serial.begin(9600);
  Serial.println();
  Serial.print(AES128GCMTest.name);
  Serial.println();
  performVerificationAndDecryption(&AES128GCMTest, &ADAD);
}

void loop() {
}
