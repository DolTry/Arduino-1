#include <ChaChaPoly.h>

struct ADADTest
{
  const char *name;
  byte key[32];
  byte iv[8];
  byte ciphertext[96];
  byte data[16];
  byte tag[16];
};

static ADADTest const ChaChaPolyTest = {
  "ChaChaPoly-verify-decrypt",
  {0x37, 0x4C, 0x33, 0x53, 0x77, 0x53, 0x71, 0x61,
  0x34, 0x4D, 0x6E, 0x4D, 0x69, 0x50, 0x5A, 0x44,
  0x53, 0x55, 0x46, 0x78, 0x52, 0x79, 0x56, 0x65,
  0x74, 0x6B, 0x41, 0x63, 0x53, 0x47, 0x75, 0x4E},
  {0x50, 0x55, 0x71, 0x78, 0x33, 0x31, 0x7A, 0x36},
  {0xC6, 0x57, 0x79, 0xD8, 0x5D, 0x2F, 0x41, 0x83, 
  0x49, 0x7A, 0xB2, 0x43, 0x8E, 0xFF, 0x35, 0xDB, 
  0xC4, 0xBF, 0xCF, 0x95, 0x68, 0x98, 0xDB, 0x05, 
  0x98, 0x4C, 0xFD, 0x00, 0x7E, 0x96, 0xEA, 0xFB, 
  0x2D, 0xFD, 0xF0, 0xEA, 0x79, 0xB9, 0xD1, 0xDE, 
  0x92, 0x8E, 0xDE, 0x23, 0x22, 0x49, 0xCC, 0xAC, 
  0xAF, 0xAF, 0xE4, 0x58, 0x0A, 0x75, 0x82, 0xAC, 
  0x8A, 0x84, 0x05, 0xDF, 0xBD, 0xA1, 0xE8, 0x2F, 
  0xC1, 0x77, 0x5E, 0x41, 0x4C, 0xFC, 0x8F, 0xC6, 
  0x1B, 0x89, 0x12, 0x76, 0x62, 0x6B, 0xB8, 0xB2, 
  0x77, 0x57, 0x25, 0x03, 0xCB, 0x9B, 0xD7, 0x00, 
  0x86, 0x26, 0x8E, 0xAA, 0xD2, 0xD3, 0x52, 0xFB},
  {0x41, 0x73, 0x73, 0x6F, 0x63, 0x69, 0x61, 0x74,
  0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2E},
  {0x60, 0x60, 0xC2, 0xEB, 0x26, 0x38, 0x00, 0xBC, 
  0xBD, 0xFA, 0x4E, 0x53, 0xB0, 0xF8, 0x0D, 0x54}
};

ChaChaPoly ADAD;

void performVerificationAndDecryption(const struct ADADTest *test, ChaChaPoly *cipher) {
  unsigned long start, elapsed;
  byte output[96] = {0};

  printHex(test->ciphertext, 96);
  Serial.println();
  start = millis();
  cipher->setKey(test->key, cipher->keySize());
  cipher->setIV(test->iv, cipher->ivSize());
  cipher->addAuthData(test->data, 16);
  cipher->decrypt((uint8_t*) output, (uint8_t*)test->ciphertext, sizeof(test->ciphertext));
  if (cipher->checkTag(test->tag, 16)) {
    Serial.print("Valid tag\n");
  } else {
    Serial.print("Invalid tag\n");
    return;
  }
  elapsed = millis() - start;
  for (short i=0; i < 96; i++) {
    Serial.print((char)output[i]);
  }
  Serial.println(); Serial.print(elapsed); Serial.print(" milliseconds \n");
}

void printHex(const uint8_t *input, size_t len) {
  for (short i=0; i < len; i++) {
    if (i % 8 == 0) {
      Serial.println();
    }
    Serial.print("0x");
    if (input[i] < 16) {
      Serial.print('0'); 
    }
    Serial.print(input[i], HEX);
    if (i+1 != len) {
      Serial.print(", ");
    }
 }
}

void setup() {
  Serial.begin(9600);
  Serial.println();
  Serial.print(ChaChaPolyTest.name);
  Serial.println();
  performVerificationAndDecryption(&ChaChaPolyTest, &ADAD);
}

void loop() {
}
