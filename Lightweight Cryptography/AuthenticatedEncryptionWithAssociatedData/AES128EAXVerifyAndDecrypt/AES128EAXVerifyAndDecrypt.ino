#include <AES.h>
#include <EAX.h>

struct ADADTest
{
  const char *name;
  byte key[16];
  byte iv[16];
  byte ciphertext[96];
  byte data[16];
  byte tag[16];
};

static ADADTest const AES128EAXTest = {
  "AES-128-EAX-verify-decrypt",
  {0x37, 0x4C, 0x33, 0x53, 0x77, 0x53, 0x71, 0x61,
  0x34, 0x4D, 0x6E, 0x4D, 0x69, 0x50, 0x5A, 0x44},
  {0x50, 0x55, 0x71, 0x78, 0x33, 0x31, 0x7A, 0x36,
  0x74, 0x6B, 0x41, 0x63, 0x53, 0x47, 0x75, 0x4E},
  {0xC8, 0x9D, 0x9B, 0xBB, 0xC6, 0x9C, 0x37, 0x55, 
  0x81, 0x18, 0xE5, 0x77, 0xCC, 0x0B, 0x5A, 0x42, 
  0xE8, 0x9F, 0xC1, 0xFD, 0x98, 0x42, 0xD6, 0xFE, 
  0x1B, 0x42, 0x3C, 0xEF, 0x38, 0xF9, 0x1A, 0xC0, 
  0xBD, 0x97, 0x32, 0xB7, 0xD9, 0x66, 0xB4, 0xBF, 
  0xB0, 0x35, 0x87, 0xDD, 0x41, 0xBF, 0x0D, 0xB6, 
  0x18, 0x2B, 0x30, 0x2A, 0x4E, 0x92, 0x54, 0xD9, 
  0x23, 0xB7, 0x02, 0x7D, 0xE3, 0x15, 0xC8, 0x20, 
  0xF4, 0xBE, 0x76, 0x45, 0x8C, 0xE8, 0x87, 0xDE, 
  0x2A, 0x3A, 0xB4, 0x73, 0xAE, 0x5B, 0x98, 0xE7, 
  0x27, 0xF5, 0xEA, 0x8A, 0x3D, 0x9B, 0x42, 0x0A, 
  0xBA, 0xA8, 0x70, 0x59, 0x63, 0x12, 0x04, 0xE8},
  {0x41, 0x73, 0x73, 0x6F, 0x63, 0x69, 0x61, 0x74,
  0x65, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2E},
  {0x17, 0x7B, 0x01, 0xE8, 0x6F, 0xF6, 0xEB, 0x1A, 
  0x97, 0xED, 0xF6, 0x00, 0xCF, 0x27, 0xAF, 0x4E}
};

EAX<AES128> ADAD;

void performVerificationAndDecryption(const struct ADADTest *test, EAX<AES128> *cipher) {
  unsigned long start, elapsed;
  byte output[96] = {0};

  printHex(test->ciphertext, 96);
  Serial.println();
  start = millis();
  cipher->setKey(test->key, cipher->keySize());
  cipher->setIV(test->iv, cipher->ivSize());
  cipher->addAuthData(test->data, 16);
  cipher->decrypt((uint8_t*) output, (uint8_t*)test->ciphertext, sizeof(test->ciphertext));
  if (cipher->checkTag(test->tag, 16)) {
    Serial.print("Valid tag\n");
  } else {
    Serial.print("Invalid tag\n");
    return;
  }
  elapsed = millis() - start;
  for (short i=0; i < 96; i++) {
    Serial.print((char)output[i]);
  }
  Serial.println(); Serial.print(elapsed); Serial.print(" milliseconds \n");
}

void printHex(const uint8_t *input, size_t len) {
  for (short i=0; i < len; i++) {
    if (i % 8 == 0) {
      Serial.println();
    }
    Serial.print("0x");
    if (input[i] < 16) {
      Serial.print('0'); 
    }
    Serial.print(input[i], HEX);
    if (i+1 != len) {
      Serial.print(", ");
    }
 }
}

void setup() {
  Serial.begin(9600);
  Serial.println();
  Serial.print(AES128EAXTest.name);
  Serial.println();
  performVerificationAndDecryption(&AES128EAXTest, &ADAD);
}

void loop() {
}
