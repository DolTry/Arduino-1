#include <AES.h>
#include <CBC.h>

struct DecryptionTest
{
  const char *name;
  byte key[32];
  byte iv[16];
  byte ciphertext[96];
};

static DecryptionTest const AES256CBCTest = {
  "AES-256-CBC-decrypt",
  {0x37, 0x4C, 0x33, 0x53, 0x77, 0x53, 0x71, 0x61,
  0x34, 0x4D, 0x6E, 0x4D, 0x69, 0x50, 0x5A, 0x44,
  0x53, 0x55, 0x46, 0x78, 0x52, 0x79, 0x56, 0x65,
  0x74, 0x6B, 0x41, 0x63, 0x53, 0x47, 0x75, 0x4E},
  {0x50, 0x55, 0x71, 0x78, 0x33, 0x31, 0x7A, 0x36,
   0x53, 0x35, 0x61, 0x65, 0x59, 0x4B, 0x6B, 0x4E},
  {0xFD, 0x1B, 0x85, 0xF1, 0x6E, 0x9E, 0x35, 0xBF,
  0x99, 0xFA, 0xFD, 0x5F, 0x78, 0x0A, 0x5E, 0x64,
  0x2B, 0xAF, 0x12, 0x0C, 0x1C, 0xC0, 0x71, 0x33,
  0x45, 0x19, 0xDE, 0x40, 0x00, 0x36, 0xA4, 0xD6,
  0xCE, 0x7E, 0xCB, 0x06, 0x20, 0x5C, 0x67, 0x02,
  0x58, 0xE0, 0x4B, 0x3E, 0x2E, 0x2D, 0x0C, 0x90,
  0x59, 0xAD, 0xF3, 0xC1, 0xB1, 0xBF, 0x18, 0x4D,
  0x9D, 0xEC, 0xB0, 0x77, 0x46, 0x1A, 0xFC, 0x5E,
  0x9A, 0x25, 0xB6, 0xF8, 0x2D, 0xBA, 0xBA, 0x4A,
  0x90, 0xC4, 0x98, 0x46, 0x51, 0x4C, 0xD5, 0xA2,
  0x49, 0x52, 0xE5, 0x5E, 0x42, 0xB6, 0xA8, 0x70,
  0xDF, 0xB0, 0x94, 0xC9, 0x46, 0x3B, 0x0D, 0xFE}
};

CBC<AES256> cipher;

void performDecryption(const struct DecryptionTest *decryption, Cipher *cipher) {
  unsigned long start;
  unsigned long elapsed;
  byte output[96] = {0};

  printHex(decryption->ciphertext, 96);
  Serial.println();
  start = millis();
  cipher->setKey(decryption->key, cipher->keySize());
  cipher->setIV(decryption->iv, cipher->ivSize());
  cipher->decrypt((uint8_t*) output, (uint8_t*)decryption->ciphertext, sizeof(decryption->ciphertext));
  elapsed = millis() - start;
  for (short i=0; i < 96; i++) {
    Serial.print((char)output[i]);
  }
  Serial.println(); Serial.print(elapsed); Serial.print(" milliseconds \n");
}

void printHex(const uint8_t *input, size_t len) {
  for (short i=0; i < len; i++) {
    if (i % 8 == 0) {
      Serial.println();
    }
    Serial.print("0x");
    if (input[i] < 16) {
      Serial.print('0'); 
    }
    Serial.print(input[i], HEX);
    if (i+1 != len) {
      Serial.print(", ");
    }
 }
}

void setup() {
  Serial.begin(9600);
  Serial.println();
  Serial.print(AES256CBCTest.name);
  Serial.println();
  performDecryption(&AES256CBCTest, &cipher);
}

void loop() {
}
