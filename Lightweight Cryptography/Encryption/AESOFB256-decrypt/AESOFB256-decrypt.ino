#include <AES.h>
#include <OFB.h>

struct DecryptionTest
{
  const char *name;
  byte key[32];
  byte iv[16];
  byte ciphertext[96];
};

static DecryptionTest const AES256OFBTest = {
  "AES-256-OFB-decrypt",
  {0x37, 0x4C, 0x33, 0x53, 0x77, 0x53, 0x71, 0x61,
  0x34, 0x4D, 0x6E, 0x4D, 0x69, 0x50, 0x5A, 0x44,
  0x53, 0x55, 0x46, 0x78, 0x52, 0x79, 0x56, 0x65,
  0x74, 0x6B, 0x41, 0x63, 0x53, 0x47, 0x75, 0x4E},
  {0x50, 0x55, 0x71, 0x78, 0x33, 0x31, 0x7A, 0x36,
   0x53, 0x35, 0x61, 0x65, 0x59, 0x4B, 0x6B, 0x4E},
  {0x81, 0xF9, 0x58, 0xA4, 0xD3, 0x65, 0xAC, 0xCC, 
  0xB9, 0xBE, 0x10, 0x3E, 0x71, 0xD4, 0x94, 0x60, 
  0x4C, 0xCC, 0x12, 0x62, 0xD1, 0xBA, 0x55, 0x96, 
  0x75, 0x06, 0xFD, 0x43, 0x0E, 0x63, 0x76, 0x13, 
  0x69, 0x6F, 0x56, 0x39, 0x30, 0xD5, 0x00, 0x2C, 
  0x5D, 0x10, 0x90, 0xC8, 0x91, 0xBC, 0x09, 0x94, 
  0xBD, 0x41, 0xDA, 0x88, 0x27, 0x4B, 0x9B, 0xC7, 
  0x1A, 0x68, 0x79, 0x03, 0x53, 0x28, 0x9E, 0xE1, 
  0x15, 0x28, 0x52, 0x9B, 0x99, 0xD1, 0x39, 0x68, 
  0x98, 0xFC, 0x76, 0x73, 0x81, 0x8F, 0x86, 0xC2, 
  0x3B, 0x33, 0x92, 0xE1, 0x91, 0x50, 0xEE, 0x79, 
  0x64, 0x0D, 0x7A, 0x02, 0xD3, 0xAA, 0xB6, 0x2C}
};

OFB<AES256> cipher;

void performDecryption(const struct DecryptionTest *decryption, Cipher *cipher) {
  unsigned long start;
  unsigned long elapsed;
  byte output[96] = {0};

  printHex(decryption->ciphertext, 96);
  Serial.println();
  start = millis();
  cipher->setKey(decryption->key, cipher->keySize());
  cipher->setIV(decryption->iv, cipher->ivSize());
  cipher->decrypt((uint8_t*) output, (uint8_t*)decryption->ciphertext, sizeof(decryption->ciphertext));
  elapsed = millis() - start;
  for (short i=0; i < 96; i++) {
    Serial.print((char)output[i]);
  }
  Serial.println(); Serial.print(elapsed); Serial.print(" milliseconds \n");
}

void printHex(const uint8_t *input, size_t len) {
  for (short i=0; i < len; i++) {
    if (i % 8 == 0) {
      Serial.println();
    }
    Serial.print("0x");
    if (input[i] < 16) {
      Serial.print('0'); 
    }
    Serial.print(input[i], HEX);
    if (i+1 != len) {
      Serial.print(", ");
    }
 }
}

void setup() {
  Serial.begin(9600);
  Serial.println();
  Serial.print(AES256OFBTest.name);
  Serial.println();
  performDecryption(&AES256OFBTest, &cipher);
}

void loop() {
}
